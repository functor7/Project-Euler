# --Project Euler 2--
#Each new term in the Fibonacci sequence is generated by adding the previous
#two terms. By starting with 1 and 2, the first 10 terms will be:
#
#1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#
#By considering the terms in the Fibonacci sequence whose values do not
#exceed four million, find the sum of the even-valued terms.



def euc(a,b):
        if b==0:
            return [[a,0],[]]
        if a==0:
            return [[b,0],[]]
        if a%b==0:
                
                return [[0], [int(a/b)]]

        r=a%b
        E=euc(b,r)

        return [[r]+E[0], [int(a/b)]+E[1]]

def sgn(a):
    if a<0:
        return -1
    return 1


def gcd(L):
        if len(L)==1:
                return L[0]
        a=L.pop()
        b=gcd(L)

        if len(euc(a,b)[0])==1:
            return b
        
        return euc(a,b)[0][-2]
#reduce a fraction in Q(sqrt(D))
def red(X):
    d=gcd([X[0],X[1],X[2]])
    return [int(sgn(X[2]/d)*X[0]/d),int(sgn(X[2]/d)*X[1]/d),int(sgn(X[2]/d)*X[2]/d),X[3]]
          

#Given a discriminant D, X=(a+sqrt(D)b)/c and (A+sqrt(D)B)/C, find their 
#sum/product/div. Must input numbers X=[a,b,c,D] and Y=[A,B,C,D]
def quad_sum(X,Y):
        return red([X[0]*Y[2]+Y[0]*X[2],X[1]*Y[2]+Y[1]*X[2],X[2]*Y[2],X[3]])

def quad_prod(X,Y):
        return red([X[0]*Y[0]+X[3]*X[1]*Y[1],X[0]*Y[1]+Y[0]*X[1],X[2]*Y[2],X[3]])

def conj(X):
          return [X[0],-X[1],X[2],X[3]]

def quad_div(X,Y):
        x=X
        x[2]=1
        
        y=Y
        y[2]=1

        Num=quad_prod(x,conj(y))
        Den=X[2]*quad_prod(y,conj(y))[0]

        return red([Y[2]*Num[0],Y[2]*Num[1],Den,X[3]])
def quad_dif(X,Y):
    return quad_sum(X,quad_prod([-1,0,1,Y[3]],Y))

def quad_pow(X,n):
    if n==0:
        return [1,0,1,X[3]]
    if n>0:
        return quad_prod(X,quad_pow(X,n-1))
    if n<0:
        return quad_div([1,0,1,X[3]],quad_pow(X,-n))



Phi=[1,1,2,5]
Fhi=quad_pow(Phi,3)
fhi=quad_prod([-1,0,1,5],quad_pow(Fhi,-1))
sqrt5=[0,1,1,5]

def sum_k_even_fib(k):
    A=quad_div(quad_dif([1,0,1,5],quad_pow(Fhi,k)),quad_dif([1,0,1,5],Fhi))
    B=quad_div(quad_dif([1,0,1,5],quad_pow(fhi,k)),quad_dif([1,0,1,5],fhi))
    a=quad_prod(Fhi,A)
    b=quad_prod(fhi,B)

    return quad_div(quad_dif(a,b),sqrt5)[0]
def Fib(k):
    return quad_div(quad_dif(quad_pow(Phi,k),quad_pow(quad_prod([-1,0,1,5],Phi),-k)),sqrt5)[0]


#Given an N, find the sum of all even Fibonacci Numbers less than N.
def Project_2(N):
    k=1
    F=Fib(3*k)

    while True:
        if F>N:
            return sum_k_even_fib(k-1)
        k=k+1
        F=Fib(3*k)



print(Project_2(4000000))









            
